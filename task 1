titanic survival rate prediction
 This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
import pandas as pd
import numpy as np

# Read the dataset
df = pd.read_csv("/kaggle/input/titanic-dataset/Titanic-Dataset.csv")

# Display the first few rows of the dataset
df.head()
# Basic info about the dataset
df.info()

# Check for missing values
df.isnull().sum()

# Summary statistics
df.describe()
# Fill Age with the median value
df['Age'].fillna(df['Age'].median(), inplace=True)
# Creating a new feature to indicate the presence of a cabin
df['Cabin_known'] = df['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)
 Fill missing values in 'Embarked' with the mode (most frequent value)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')
plt.title('Missing Values Heatmap')
plt.show()
sns.countplot(x='Survived', data=df, palette='viridis')
plt.title('Survival Count')
plt.show()
sns.countplot(x='Survived', hue='Sex', data=df, palette='coolwarm')
plt.title('Survival by Gender')
plt.show()
plt.figure(figsize=(10,6))
sns.histplot(df['Age'], kde=True, bins=30)
plt.title('Age Distribution')
plt.show()

# Survival by Age
plt.figure(figsize=(10,6))
sns.kdeplot(data=df, x='Age', hue='Survived', fill=True)
plt.title('Survival by Age Distribution')
plt.show()
sns.countplot(x='Pclass', hue='Survived', data=df, palette='magma')
plt.title('Survival by Passenger Class')
plt.show()
plt.figure(figsize=(10,6))
sns.histplot(df['Fare'], kde=True, bins=40)
plt.title('Fare Distribution')
plt.show()

# Fare vs Survival
plt.figure(figsize=(10,6))
sns.boxplot(x='Survived', y='Fare', data=df, palette='coolwarm')
plt.title('Fare vs Survival')
plt.show()
# plt.figure(figsize=(10,8))
# sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
# plt.title('Correlation Matrix')
# plt.show()
sns.pairplot(df[['Age', 'Fare', 'Pclass', 'Survived']], hue='Survived', palette='viridis')
plt.show();
sns.violinplot(x='Pclass', y='Fare', hue='Survived', data=df, split=True, palette='muted')
plt.title('Fare Distribution by Passenger Class and Survival')
plt.show()
fig, ax = plt.subplots(1, 2, figsize=(14,6))
sns.countplot(x='SibSp', hue='Survived', data=df, palette='viridis', ax=ax[0])
ax[0].set_title('Survival by SibSp')
sns.countplot(x='Parch', hue='Survived', data=df, palette='viridis', ax=ax[1])
ax[1].set_title('Survival by Parch')
plt.show()
df['Title'] = df['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())

# Replace rare titles with "Other"
df['Title'] = df['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 
                                    'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')
df['Title'] = df['Title'].replace('Mlle', 'Miss')
df['Title'] = df['Title'].replace('Ms', 'Miss')
df['Title'] = df['Title'].replace('Mme', 'Mrs')

# Visualizing Title by Survival
sns.countplot(x='Title', hue='Survived', data=df, palette='coolwarm')
plt.title('Survival by Title')
plt.xticks(rotation=45)
plt.show()
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1

# Visualizing Family Size by Survival
sns.countplot(x='FamilySize', hue='Survived', data=df, palette='magma')
plt.title('Survival by Family Size')
plt.show()
# One-hot encoding for 'Embarked'
df = pd.get_dummies(df, columns=['Embarked', 'Title'], drop_first=True)

# Label encoding for 'Sex'
df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})
from sklearn.model_selection import train_test_split

# Features (drop PassengerId, Name, Ticket, Cabin, and Survived)
X = df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Survived'], axis=1)

# Target
y = df['Survived']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check shapes
X_train.shape, X_test.shape, y_train.shape, y_test.shape
